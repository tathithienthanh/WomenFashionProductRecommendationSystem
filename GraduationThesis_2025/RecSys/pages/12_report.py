import streamlit as st
import pymysql
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
import plotly.express as px
from wordcloud import WordCloud

def get_connection():
    return pymysql.connect(
        host="localhost",
        user="root",
        password="Abcxyz@123",
        database="eCommerce"
    )

def has_permission(permission_id: str) -> bool:
    admin_id = st.session_state["admin_id"]
    if not admin_id:
        return False
    
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            query = """
                SELECT 1 FROM AdminHasPermissions
                WHERE permission_id = %s AND admin_id = %s
                LIMIT 1
            """
            cursor.execute(query, (permission_id, admin_id))
            return cursor.fetchone() is not None
    finally:
        conn.close()

def log_admin_activity(admin_id, activity):
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            sql = "INSERT INTO ActivityLog (admin_id, activity) VALUES (%s, %s)"
            cursor.execute(sql, (admin_id, activity))
        conn.commit()
    finally:
        conn.close()

def report_top_selling_products():
    conn = get_connection()
    try:
        query = """
        SELECT product_id AS 'M√£ SP', product_name AS 'T√™n s·∫£n ph·∫©m', total_sold AS 'ƒê√£ b√°n', discounted_price AS 'Gi√°'
        FROM TopSellingProducts
        ORDER BY total_sold DESC
        LIMIT 10;
        """
        return pd.read_sql(query, conn)
    finally:
        conn.close()

def report_most_reviewed_products():
    conn = get_connection()
    try:
        query = """
        SELECT product_id, product_name, total_reviews, avg_rating
        FROM ProductReviewsSummary
        ORDER BY avg_rating DESC
        LIMIT 10;
        """
        return pd.read_sql(query, conn)
    finally:
        conn.close()

def get_reviews_for_top_products(product_ids):
    conn = get_connection()
    try:
        format_ids = ",".join(f"'{pid}'" for pid in product_ids)
        query = f"""
        SELECT content
        FROM Review
        WHERE product_id IN ({format_ids});
        """
        df_reviews = pd.read_sql(query, conn)
        return df_reviews['content'].dropna().tolist()
    finally:
        conn.close()

def report_top_customers():
    conn = get_connection()
    try:
        query = """
        SELECT C.customer_id AS 'M√£ KH', C.first_name AS 'T√™n', C.last_name AS 'H·ªç',
               COUNT(O.order_id) AS 'S·ªë ƒë∆°n h√†ng', SUM(O.total_price) AS 'T·ªïng chi ti√™u'
        FROM Orders O
        JOIN Customer C ON O.customer_id = C.customer_id
        GROUP BY O.customer_id
        ORDER BY SUM(O.total_price) DESC
        LIMIT 10;
        """
        return pd.read_sql(query, conn)
    finally:
        conn.close()

def report_revenue():
    try:
        conn = get_connection()
        query = """
            SELECT DATE(order_date) AS 'Ng√†y', SUM(total_price) AS 'Doanh thu'
            FROM Orders
            GROUP BY DATE(order_date)
            ORDER BY DATE(order_date) ASC;
        """
        df = pd.read_sql(query, conn)
        return df
    finally:
        conn.close()

def report_product_statistics():
    try:
        conn = get_connection()
        query = """
            SELECT c.description AS 'Lo·∫°i s·∫£n ph·∫©m',
                   COUNT(p.product_id) AS 'S·ªë l∆∞·ª£ng s·∫£n ph·∫©m',
                   ROUND(AVG(p.price * (1 - IFNULL(p.discount, 0))), 2) AS 'Gi√° trung b√¨nh'
            FROM Product p
            JOIN ProductHasCategories pc ON p.product_id = pc.product_id
            JOIN Category c ON pc.category_id = c.category_id
            GROUP BY c.description
            ORDER BY 'S·ªë l∆∞·ª£ng s·∫£n ph·∫©m';
        """
        df = pd.read_sql(query, conn)
        return df
    finally:
        conn.close()

st.title("üìä Trang B√°o C√°o Th·ªëng K√™")

if "admin_id" not in st.session_state:
    st.warning("‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p v·ªõi vai tr√≤ admin ƒë·ªÉ truy c·∫≠p trang n√†y.")
    st.stop()

if not has_permission("VIEW_REPORT"):
    st.warning("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y.")
    st.stop()

st.success("Xin ch√†o admin!")

report_type = st.selectbox("üìå Ch·ªçn lo·∫°i b√°o c√°o mu·ªën xem:", [
    "Top 10 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t",
    "Top 10 s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° nhi·ªÅu nh·∫•t",
    "Top 10 kh√°ch h√†ng mua nhi·ªÅu nh·∫•t",
    "B√°o c√°o doanh thu",
    "B√°o c√°o th·ªëng k√™ s·∫£n ph·∫©m"
])

if st.button("üì• Xem b√°o c√°o"):
    with st.spinner("ƒêang truy xu·∫•t d·ªØ li·ªáu..."):
        if report_type == "Top 10 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t":
            df = report_top_selling_products()
            log_admin_activity(st.session_state.admin_id, "Xem b√°o c√°o s·∫£n ph·∫©m b√°n ch·∫°y")
        elif report_type == "Top 10 s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° nhi·ªÅu nh·∫•t":
            df = report_most_reviewed_products()
            log_admin_activity(st.session_state.admin_id, "Xem b√°o c√°o s·∫£n ph·∫©m ƒë√°nh gi√° nhi·ªÅu")
        elif report_type == "Top 10 kh√°ch h√†ng mua nhi·ªÅu nh·∫•t":
            df = report_top_customers()
            log_admin_activity(st.session_state.admin_id, "Xem b√°o c√°o kh√°ch h√†ng mua nhi·ªÅu")
        elif report_type == "B√°o c√°o doanh thu":
            df = report_revenue()
            log_admin_activity(st.session_state.admin_id, "Xem b√°o c√°o doanh thu")
        elif report_type == "B√°o c√°o th·ªëng k√™ s·∫£n ph·∫©m":
            df = report_product_statistics()
            log_admin_activity(st.session_state.admin_id, "Xem b√°o c√°o th·ªëng k√™ s·∫£n ph·∫©m")

        st.dataframe(df, use_container_width=True)
        st.session_state.current_report_df = df

        st.subheader("üìà Bi·ªÉu ƒë·ªì minh h·ªça")
        if report_type == "Top 10 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t":
            df_chart = df.melt(id_vars='M√£ SP', value_vars=['ƒê√£ b√°n', 'Gi√°'], var_name='Ch·ªâ s·ªë', value_name='Gi√° tr·ªã')

            fig = px.bar(df_chart, x='M√£ SP', y='Gi√° tr·ªã', color='Ch·ªâ s·ªë', barmode='group', title='Top 10 s·∫£n ph·∫©m b√°n ch·∫°y: So s√°nh ƒê√£ b√°n v√† Gi√°')
            fig.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig, use_container_width=True)

        elif report_type == "Top 10 s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° nhi·ªÅu nh·∫•t":
            fig = px.bar(df, x='avg_rating', y='product_id', orientation='h',
                         title="Top 10 s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° cao", text='avg_rating')
            fig.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig, use_container_width=True)

            product_ids = df['product_id'].tolist()
            reviews = get_reviews_for_top_products(product_ids)
            all_text = " ".join(reviews)

            if all_text.strip():
                st.subheader("üìà Bi·ªÉu ƒë·ªì Wordcloud c√°c ƒë√°nh gi√° c·ªßa s·∫£n ph·∫©m")
                wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_text)
                fig, ax = plt.subplots(figsize=(10, 5))
                ax.imshow(wordcloud, interpolation='bilinear')
                ax.axis("off")
                st.pyplot(fig)
            else:
                st.info("Kh√¥ng t√¨m th·∫•y n·ªôi dung ƒë√°nh gi√° ƒë·ªÉ t·∫°o WordCloud.")

        elif report_type == "Top 10 kh√°ch h√†ng mua nhi·ªÅu nh·∫•t":
            fig = px.bar(df, x='T·ªïng chi ti√™u', y='M√£ KH', orientation='h',
                         title="Top 10 kh√°ch h√†ng mua nhi·ªÅu nh·∫•t", text='T·ªïng chi ti√™u')
            fig.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig, use_container_width=True)

        elif report_type == "B√°o c√°o doanh thu":
            fig = px.line(df, x='Ng√†y', y='Doanh thu', title="üìÖ Doanh thu theo ng√†y")
            st.plotly_chart(fig, use_container_width=True)

        elif report_type == "B√°o c√°o th·ªëng k√™ s·∫£n ph·∫©m":
            fig = px.pie(df, names='Lo·∫°i s·∫£n ph·∫©m', values='S·ªë l∆∞·ª£ng s·∫£n ph·∫©m', title="üì¶ T·ª∑ l·ªá s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo danh m·ª•c", hole=0.5)
            fig.update_traces(textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)
            
            fig2 = px.bar(df, x='Lo·∫°i s·∫£n ph·∫©m', y='Gi√° trung b√¨nh', title="üí∞ Gi√° trung b√¨nh theo danh m·ª•c", text='Gi√° trung b√¨nh')
            st.plotly_chart(fig2, use_container_width=True)

# N√∫t xu·∫•t CSV
if 'current_report_df' in st.session_state:
    csv = st.session_state.current_report_df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="üíæ Xu·∫•t CSV",
        data=csv,
        file_name=f"{report_type}_{datetime.now().strftime('%Y%m%d')}.csv",
        mime='text/csv',
        help="T·∫£i b√°o c√°o d∆∞·ªõi d·∫°ng file CSV"
    )
