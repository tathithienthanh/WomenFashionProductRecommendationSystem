import streamlit as st
import pandas as pd
import pymysql

def get_connection():
    return pymysql.connect(
        host="localhost",
        user="root",
        password="Abcxyz@123",
        database="eCommerce"
    )

def has_permission(permission_id: str) -> bool:
    admin_id = st.session_state["admin_id"]
    if not admin_id:
        return False
    
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            query = """
                SELECT 1 FROM AdminHasPermissions
                WHERE permission_id = %s AND admin_id = %s
                LIMIT 1
            """
            cursor.execute(query, (permission_id, admin_id))
            return cursor.fetchone() is not None
    finally:
        conn.close()

def log_admin_activity(admin_id, activity):
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            sql = "INSERT INTO ActivityLog (admin_id, activity) VALUES (%s, %s)"
            cursor.execute(sql, (admin_id, activity))
        conn.commit()
    finally:
        conn.close()

def list_users():
    conn = get_connection()
    try:
        df = pd.read_sql(
            "SELECT customer_id, first_name, last_name, email, phone_number, address FROM Customer", conn)
        return df
    finally:
        conn.close()

def add_user(first_name, last_name, email, password, phone_number=None, address=None):
    try:
        conn = get_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT COUNT(*) AS total FROM Customer")
            result = cursor.fetchone()
            next_id = result[0] + 1
            customer_id = f"C{next_id:03}"
            
            cursor.execute( 
                """
                INSERT INTO Customer (customer_id, last_name, first_name, email, password, phone_number, address)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
                """,
                (customer_id, last_name, first_name, email, password, phone_number, address)
            )
        conn.commit()
    finally:
        conn.close()

def update_user(customer_id, first_name, last_name, phone=None, address=None):
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            query = """
            UPDATE Customer
            SET first_name = %s, last_name = %s, phone_number = %s, address = %s
            WHERE customer_id = %s
            """
            cursor.execute(query, (first_name, last_name, phone, address, customer_id))
        conn.commit()
    finally:
        conn.close()

def delete_user(customer_id):
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM Customer WHERE customer_id = %s", (customer_id,))
        conn.commit()
    finally:
        conn.close()

st.title("üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng")

if "admin_id" not in st.session_state:
    st.warning("‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p v·ªõi vai tr√≤ admin ƒë·ªÉ truy c·∫≠p trang n√†y.")
    st.stop()

if not has_permission("MANAGE_USERS"):
    st.warning("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y.")
    st.stop()

tab1, tab2, tab3 = st.tabs(["üìã Danh s√°ch", "‚ûï Th√™m", "‚úèÔ∏è C·∫≠p nh·∫≠t / ‚ùå Xo√°"])

with tab1:
    st.subheader("üìã Danh s√°ch ng∆∞·ªùi d√πng")
    df = list_users()
    st.dataframe(df, use_container_width=True)

with tab2:
    st.subheader("‚ûï Th√™m ng∆∞·ªùi d√πng")
    with st.form("add_user_form"):
        fname = st.text_input("H·ªç")
        lname = st.text_input("T√™n")
        email = st.text_input("Email")
        phone = st.text_input("S·ªë ƒëi·ªán tho·∫°i")
        address = st.text_input("ƒê·ªãa ch·ªâ")
        submitted = st.form_submit_button("Th√™m")
        if submitted:
            if fname and lname and email:
                add_user(fname, lname, email, 'Abcxyz@123', phone, address)
                st.success("ƒê√£ th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng!")
                log_admin_activity(st.session_state.admin_id, 'Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng')
            else:
                st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.")
                log_admin_activity(st.session_state.admin_id, 'Th√™m ng∆∞·ªùi d√πng kh√¥ng th√†nh c√¥ng')

with tab3:
    st.subheader("‚úèÔ∏è C·∫≠p nh·∫≠t / ‚ùå Xo√°")
    df = list_users()
    if not df.empty:
        selected_user = st.selectbox("Ch·ªçn ng∆∞·ªùi d√πng", df["customer_id"].tolist())
        user_data = df[df["customer_id"] == selected_user].iloc[0]

        with st.form("update_user_form"):
            fname = st.text_input("H·ªç", value=user_data["first_name"])
            lname = st.text_input("T√™n", value=user_data["last_name"])
            phone = st.text_input("SƒêT", value=user_data["phone_number"])
            address = st.text_input("ƒê·ªãa ch·ªâ", value=user_data["address"])
            col1, col2 = st.columns(2)
            if col1.form_submit_button("C·∫≠p nh·∫≠t"):
                update_user(selected_user, fname, lname, phone, address)
                st.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!")
                log_admin_activity(st.session_state.admin_id, 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng')
            if col2.form_submit_button("‚ùå Xo√° ng∆∞·ªùi d√πng"):
                delete_user(selected_user)
                st.warning("ƒê√£ xo√° ng∆∞·ªùi d√πng.")
                log_admin_activity(st.session_state.admin_id, 'X√≥a th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng')
    else:
        st.info("Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o trong h·ªá th·ªëng.")
