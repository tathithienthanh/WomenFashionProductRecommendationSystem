import streamlit as st
import pandas as pd
import pymysql

def get_connection():
    return pymysql.connect(
        host="localhost",
        user="root",
        password="Abcxyz@123",
        database="eCommerce"
    )

def has_permission(permission_id: str) -> bool:
    admin_id = st.session_state["admin_id"]
    if not admin_id:
        return False
    
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            query = """
                SELECT 1 FROM AdminHasPermissions
                WHERE permission_id = %s AND admin_id = %s
                LIMIT 1
            """
            cursor.execute(query, (permission_id, admin_id))
            return cursor.fetchone() is not None
    finally:
        conn.close()

def log_admin_activity(admin_id, activity):
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            sql = "INSERT INTO ActivityLog (admin_id, activity) VALUES (%s, %s)"
            cursor.execute(sql, (admin_id, activity))
        conn.commit()
    finally:
        conn.close()

def list_products():
    conn = get_connection()
    try:
        query = "SELECT * FROM Product"
        return pd.read_sql(query, conn)
    finally:
        conn.close()

def list_categories():
    conn = get_connection()
    try:
        return pd.read_sql("SELECT * FROM Category", conn)
    finally:
        conn.close()

def add_product(name, description, price, quantity, image_url, discount, sold, rating, categories):
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT COUNT(*) FROM Product")
            count = cursor.fetchone()[0]
            product_id = f"P{count+1:03}"

            cursor.execute("""
                INSERT INTO Product (product_id, name, description, price, quantity, image_url, discount, sold, rating)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, (product_id, name, description, price, quantity, image_url, discount, sold, rating))

            for category_id in categories:
                cursor.execute("INSERT INTO ProductHasCategories (category_id, product_id) VALUES (%s, %s)",
                               (category_id, product_id))
        conn.commit()
    finally:
        conn.close()

def update_product(product_id, name, description, price, quantity, image_url, discount, sold, rating):
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                UPDATE Product SET name=%s, description=%s, price=%s, quantity=%s, image_url=%s, discount=%s, sold=%s, rating=%s
                WHERE product_id = %s
            """, (name, description, price, quantity, image_url, discount, sold, rating, product_id))
        conn.commit()
    finally:
        conn.close()

def delete_product(product_id):
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM Product WHERE product_id = %s", (product_id,))
        conn.commit()
    finally:
        conn.close()
st.title("üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m")

if "admin_id" not in st.session_state:
    st.warning("‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p v·ªõi vai tr√≤ admin ƒë·ªÉ truy c·∫≠p trang n√†y.")
    st.stop()

if not has_permission("MANAGE_PRODUCTS"):
    st.warning("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y.")
    st.stop()

tab1, tab2, tab3 = st.tabs(["üìã Danh s√°ch", "‚ûï Th√™m", "‚úèÔ∏è C·∫≠p nh·∫≠t / ‚ùå Xo√°"])

with tab1:
    st.subheader("üìã Danh s√°ch s·∫£n ph·∫©m")
    df = list_products()
    st.dataframe(df, use_container_width=True)

with tab2:
    st.subheader("‚ûï Th√™m s·∫£n ph·∫©m")
    with st.form("add_product_form"):
        name = st.text_input("T√™n s·∫£n ph·∫©m")
        description = st.text_area("M√¥ t·∫£")
        price = st.number_input("Gi√°", min_value=0.0, step=1000.0)
        quantity = st.number_input("S·ªë l∆∞·ª£ng", min_value=0)
        image_url = st.text_input("Link h√¨nh ·∫£nh")
        discount = st.number_input("Gi·∫£m gi√° (%)", min_value=0.0, max_value=100.0, step=0.5)
        categories_df = list_categories()
        selected_categories = st.multiselect("Danh m·ª•c", categories_df["category_id"].tolist())

        submitted = st.form_submit_button("Th√™m")
        if submitted and name and price:
            add_product(name, description, price, quantity, image_url, discount, 0, 0, selected_categories)
            st.success("‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m th√†nh c√¥ng.")
            log_admin_activity(st.session_state.admin_id, f"Th√™m s·∫£n ph·∫©m: {name}")
        elif submitted:
            st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin c·∫ßn thi·∫øt.")

with tab3:
    st.subheader("‚úèÔ∏è C·∫≠p nh·∫≠t / ‚ùå Xo√° s·∫£n ph·∫©m")
    products_df = list_products()
    if not products_df.empty:
        selected_product_id = st.selectbox("Ch·ªçn s·∫£n ph·∫©m", products_df["product_id"].tolist())
        prod = products_df[products_df["product_id"] == selected_product_id].iloc[0]

        with st.form("update_product_form"):
            name = st.text_input("T√™n", value=prod["name"])
            description = st.text_area("M√¥ t·∫£", value=prod["description"])
            price = st.number_input("Gi√°", value=prod["price"], step=1000.0)
            quantity = st.number_input("S·ªë l∆∞·ª£ng", value=prod["quantity"])
            image_url = st.text_input("H√¨nh ·∫£nh", value=prod["image_url"])
            discount = st.number_input("Gi·∫£m gi√°", value=prod["discount"] or 0.0, step=0.5)
            sold = st.number_input("ƒê√£ b√°n", value=prod["sold"], disabled=True)
            rating = st.slider("ƒê√°nh gi√°", value=prod["rating"] or 0.0, min_value=0.0, max_value=5.0, step=0.1, disabled=True)

            col1, col2 = st.columns(2)
            if col1.form_submit_button("C·∫≠p nh·∫≠t"):
                update_product(selected_product_id, name, description, price, quantity, image_url, discount, sold, rating)
                st.success("‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng.")
                log_admin_activity(st.session_state.admin_id, f"C·∫≠p nh·∫≠t s·∫£n ph·∫©m: {selected_product_id}")
            if col2.form_submit_button("‚ùå Xo√°"):
                delete_product(selected_product_id)
                st.warning("‚ùå ƒê√£ xo√° s·∫£n ph·∫©m.")
                log_admin_activity(st.session_state.admin_id, f"Xo√° s·∫£n ph·∫©m: {selected_product_id}")
    else:
        st.info("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o.")