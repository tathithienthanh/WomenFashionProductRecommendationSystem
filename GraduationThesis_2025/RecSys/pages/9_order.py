import streamlit as st
import pymysql
import random
from datetime import datetime

# --- K·∫øt n·ªëi CSDL ---
def get_connection():
    return pymysql.connect(
        host="localhost",
        user="root",
        password="Abcxyz@123",
        database="eCommerce",
        cursorclass=pymysql.cursors.DictCursor
    )

# --- L·∫•y gi·ªè h√†ng ---
def fetch_cart(customer_id):
    try:
        conn = get_connection()
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT Cart.product_id, Product.name, Product.price, Cart.quantity
                FROM Cart
                JOIN Product ON Cart.product_id = Product.product_id
                WHERE Cart.customer_id = %s
            """, (customer_id,))
            return cursor.fetchall()
    finally:
        conn.close()

# --- L·∫•y ph∆∞∆°ng th·ª©c thanh to√°n ---
def fetch_payment_methods():
    try:
        conn = get_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT payment_id, description FROM payment")
            return cursor.fetchall()
    finally:
        conn.close()

# --- ƒê·∫∑t h√†ng ---
def place_order(customer_id, cart_items, payment_method):
    try:
        conn = get_connection()
        with conn.cursor() as cursor:
            # L·∫•y ID ƒë∆°n h√†ng l·ªõn nh·∫•t hi·ªán t·∫°i
            cursor.execute("SELECT MAX(CAST(SUBSTRING(order_id, 2) AS UNSIGNED)) AS max_id FROM orders")
            result = cursor.fetchone()
            max_order_id = result["max_id"]
            new_order_id = f"O{(max_order_id + 1):04d}" if max_order_id is not None else "O0001"

            # T·∫°o ƒë∆°n h√†ng m·ªõi
            cursor.execute(""" 
                INSERT INTO orders (order_id, customer_id, order_status, order_date, address, total_price, payment)
                VALUES (%s, %s, 'SHIPPED', NOW(), '', 0, %s)
            """, (new_order_id, customer_id, payment_method))
            
            total = 0
            for item in cart_items:
                total += item["price"] * item["quantity"]
                cursor.execute("""
                    INSERT INTO orderdetail (order_id, product_id, quantity, unit_price, discount)
                    VALUES (%s, %s, %s, %s, 0)
                """, (new_order_id, item["product_id"], item["quantity"], item["price"]))

            cursor.execute("UPDATE orders SET total_price = %s WHERE order_id = %s", (total, new_order_id))
            cursor.execute("DELETE FROM Cart WHERE customer_id = %s", (customer_id,))
            conn.commit()
            return new_order_id
    finally:
        conn.close()

# --- L·∫•y s·∫£n ph·∫©m trong ƒë∆°n h√†ng ---
def get_order_products(order_id):
    try:
        conn = get_connection()
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT od.product_id, p.name
                FROM orderdetail od
                JOIN product p ON od.product_id = p.product_id
                WHERE od.order_id = %s
            """, (order_id,))
            return cursor.fetchall()
    finally:
        conn.close()

# --- Th√™m ƒë√°nh gi√° ---
def submit_review(customer_id, product_id, rating, content):
    try:
        conn = get_connection()
        with conn.cursor() as cursor:
            cursor.execute("""
                INSERT INTO review (customer_id, product_id, rating, content, created_at)
                VALUES (%s, %s, %s, %s, %s)
            """, (customer_id, product_id, rating, content, datetime.now()))
            conn.commit()
    finally:
        conn.close()

# --- G·ª£i √Ω ng·∫´u nhi√™n s·∫£n ph·∫©m ---
def get_random_products(limit=5):
    try:
        conn = get_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT product_id, name, price FROM Product")
            products = cursor.fetchall()
            return random.sample(products, min(limit, len(products)))
    finally:
        conn.close()

# --- Ki·ªÉm tra ƒëƒÉng nh·∫≠p ---
if "logged_in_user" not in st.session_state:
    st.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng.")
    st.stop()

customer_id = st.session_state["customer_id"]
st.title("üßæ X√°c nh·∫≠n ƒë∆°n h√†ng")

# --- Hi·ªÉn th·ªã gi·ªè h√†ng ---
cart_items = fetch_cart(customer_id)

if not cart_items:
    st.info("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.")
    st.stop()

# Hi·ªÉn th·ªã s·∫£n ph·∫©m trong gi·ªè h√†ng
total = 0
for item in cart_items:
    st.write(f"- **{item['name']}** x {item['quantity']} = {item['price'] * item['quantity']:,.0f} ƒë")
    total += item['price'] * item['quantity']

st.markdown("---")
st.subheader(f"**T·ªïng c·ªông: {total:,.0f} ƒë**")

# --- Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n ---
st.markdown("### üí≥ Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n")
payments = fetch_payment_methods()
payment_options = {p['description']: p['payment_id'] for p in payments}
selected_description = st.selectbox("Ph∆∞∆°ng th·ª©c thanh to√°n", list(payment_options.keys()))
selected_payment_id = payment_options[selected_description]

if st.button("‚úÖ X√°c nh·∫≠n ƒë·∫∑t h√†ng"):
    order_id = place_order(customer_id, cart_items, selected_payment_id)
    st.success(f"üéâ ƒê∆°n h√†ng #{order_id} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng v·ªõi ph∆∞∆°ng th·ª©c thanh to√°n **{selected_description}**!")

    st.markdown("---")
    st.subheader("üõç C√≥ th·ªÉ b·∫°n s·∫Ω th√≠ch")

    suggested = get_random_products(5)
    for sp in suggested:
        st.markdown(f"- **{sp['name']}** - {sp['price']:,.0f} ƒë")

    st.markdown("---")
    st.subheader("‚úçÔ∏è Vi·∫øt ƒë√°nh gi√° s·∫£n ph·∫©m")

    products = get_order_products(order_id)
    for product in products:
        st.markdown(f"**üßæ {product['name']}**")

        with st.form(f"review_form_{product['product_id']}"):
            rating = st.slider("ƒê√°nh gi√° (1-5 ‚≠ê)", 1, 5, 5)
            content = st.text_area("N·ªôi dung ƒë√°nh gi√°")
            submit = st.form_submit_button("G·ª≠i ƒë√°nh gi√°")

            if submit:
                submit_review(customer_id, product['product_id'], rating, content)
                st.success("üéâ ƒê√°nh gi√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i!")
